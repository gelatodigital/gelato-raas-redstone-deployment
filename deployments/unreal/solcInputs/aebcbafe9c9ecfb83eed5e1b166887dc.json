{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/demos/SimplePriceFeedConsumer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nstruct Prices {\n  uint256 offChain;\n  uint256 onChain;\n}\n\ncontract SimplePriceFeedConsumer {\n  AggregatorV3Interface private priceFeed;\n  int256 public latestSavedPrice;\n  uint256 public priceId;\n  mapping(uint256 => Prices ) public prices;\n\n  constructor(AggregatorV3Interface priceFeed_) {\n    priceFeed = priceFeed_;\n  }\n\n  function doSomethingWithPrice(uint256 _offChain) public {\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n\n    prices[priceId] = Prices(_offChain,uint(price));\n    // We can do whatever logic with the price\n    // In this example, we just save it in a storage variable\n    latestSavedPrice = price;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}