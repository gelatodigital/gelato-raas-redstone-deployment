{
  "address": "0x0216638cBd921F7075728BEe617835881B21307E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRedstoneAdapter",
          "name": "_adapterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "requestedRoundId",
          "type": "uint80"
        }
      ],
      "name": "GetRoundDataCanBeOnlyCalledWithLatestRound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UnsafeUintToIntConversion",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adapterAddress",
      "outputs": [
        {
          "internalType": "contract IRedstoneAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeedAdapter",
      "outputs": [
        {
          "internalType": "contract IRedstoneAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "requestedRoundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2ce4290553a446bcfecf3dbe9e00543b79ecc2a56f66f0742c6e24655800b25",
  "receipt": {
    "to": null,
    "from": "0x903918bB1903714E0518Ea2122aCeBfa27f11b6F",
    "contractAddress": "0x0216638cBd921F7075728BEe617835881B21307E",
    "transactionIndex": 0,
    "gasUsed": "443902",
    "logsBloom": "0x
    "blockHash": "0xcbda0d05123604238592daadf9dee46949155e0b21f68af98f14277b29043606",
    "transactionHash": "0xe2ce4290553a446bcfecf3dbe9e00543b79ecc2a56f66f0742c6e24655800b25",
    "logs": [],
    "blockNumber": 2608,
    "cumulativeGasUsed": "443902",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2a88Ea6aAf8FD7907B4d6493F2B6777dDbfCC53C"
  ],
  "numDeployments": 1,
  "solcInputHash": "19727865a4639f09c9206c9294638860",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRedstoneAdapter\",\"name\":\"_adapterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"requestedRoundId\",\"type\":\"uint80\"}],\"name\":\"GetRoundDataCanBeOnlyCalledWithLatestRound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnsafeUintToIntConversion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adapterAddress\",\"outputs\":[{\"internalType\":\"contract IRedstoneAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeedAdapter\",\"outputs\":[{\"internalType\":\"contract IRedstoneAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"requestedRoundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"decimals()\":{\"details\":\"By default, RedStone uses 8 decimals for data feeds\",\"returns\":{\"_0\":\"decimals The number of decimals in the price feed values\"}},\"description()\":{\"returns\":{\"_0\":\"description\"}},\"getDataFeedId()\":{\"returns\":{\"_0\":\"dataFeedId The identifier of the data feed\"}},\"getPriceFeedAdapter()\":{\"returns\":{\"_0\":\"address The address of the price feed adapter\"}},\"getRoundData(uint80)\":{\"details\":\"There are possible use cases that some contracts don't need values from old rounds but still rely on `getRoundData` or `latestRounud` functions\"},\"initialize()\":{\"details\":\"Helpful function for upgradable contracts\"},\"latestAnswer()\":{\"returns\":{\"_0\":\"latestAnswer The latest successfully reported value\"}},\"latestRound()\":{\"details\":\"We always return 0, since we do not support rounds in this contract\"},\"latestRoundData()\":{\"details\":\"It uses few helpful functions to abstract logic of getting latest round id and value\",\"returns\":{\"answer\":\"The latest reported value\",\"answeredInRound\":\"The number of the latest round\",\"roundId\":\"The number of the latest round\",\"startedAt\":\"Block timestamp when the latest successful round started\",\"updatedAt\":\"Block timestamp of the latest successful round\"}},\"version()\":{\"details\":\"Currently it has no specific motivation and was added only to be compatible with the Chainlink interface\",\"returns\":{\"_0\":\"version\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decimals()\":{\"notice\":\"Returns the number of decimals for the price feed\"},\"description()\":{\"notice\":\"Description of the Price Feed\"},\"getDataFeedId()\":{\"notice\":\"Returns data feed identifier for the PriceFeed contract\"},\"getPriceFeedAdapter()\":{\"notice\":\"Returns the address of the price feed adapter\"},\"latestAnswer()\":{\"notice\":\"Old Chainlink function for getting the latest successfully reported value\"},\"latestRoundData()\":{\"notice\":\"Returns details of the latest successful update round\"},\"version()\":{\"notice\":\"Version of the Price Feed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceFeeds/BTC/PriceFeedBTC.sol\":\"PriceFeedBTC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"contracts/PriceFeeds/BTC/PriceFeedBTC.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport {IRedstoneAdapter} from \\\"../../RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/core/IRedstoneAdapter.sol\\\";\\nimport {PriceFeedWithoutRounds} from \\\"../../RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/without-rounds/PriceFeedWithoutRounds.sol\\\";\\n\\ncontract PriceFeedBTC is PriceFeedWithoutRounds {\\n\\n  IRedstoneAdapter immutable public adapterAddress;\\n\\n  constructor(IRedstoneAdapter _adapterAddress){\\n    adapterAddress = _adapterAddress;\\n  }\\n\\n  // This function is added just for testing purposes\\n  // You should not have a function like this in the real contracts\\n  // function setPriceFeedAdapter(IRedstoneAdapter _adapterAddress) public {\\n  //   adapterAddress = _adapterAddress;\\n  // }\\n\\n  function getDataFeedId() public view virtual override returns (bytes32) {\\n    return bytes32(\\\"BTC\\\");\\n  }\\n\\n  // In production contract we recommend to hardcode the actual address here to avoid\\n  // additional gas costs related tor reading the address from storage.\\n  // We also strongly recommend to have some upgradability mechanism for your contracts\\n  function getPriceFeedAdapter() public view virtual override returns (IRedstoneAdapter) {\\n    return adapterAddress;\\n  }\\n}\\n\",\"keccak256\":\"0xf695c074363e96031941a07479f7244e377153431e7bda20f2d0f0a168a4182f\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/RedStoneBaseContracts/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"contracts/RedStoneBaseContracts/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/core/IRedstoneAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface of RedStone adapter\\n * @author The Redstone Oracles team\\n */\\ninterface IRedstoneAdapter {\\n\\n  /**\\n   * @notice Updates values of all data feeds supported by the Adapter contract\\n   * @dev This function requires an attached redstone payload to the transaction calldata.\\n   * It also requires each data package to have exactly the same timestamp\\n   * @param dataPackagesTimestamp Timestamp of each signed data package in the redstone payload\\n   */\\n  function updateDataFeedsValues(uint256 dataPackagesTimestamp) external;\\n\\n\\n  /**\\n   * @notice Returns the latest properly reported value of the data feed\\n   * @param dataFeedId The identifier of the requested data feed\\n   * @return value The latest value of the given data feed\\n   */\\n  function getValueForDataFeed(bytes32 dataFeedId) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the latest properly reported values for several data feeds\\n   * @param requestedDataFeedIds The array of identifiers for the requested feeds\\n   * @return values Values of the requested data feeds in the corresponding order\\n   */\\n  function getValuesForDataFeeds(bytes32[] memory requestedDataFeedIds) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns data timestamp from the latest update\\n   * @dev It's virtual, because its implementation can sometimes be different\\n   * (e.g. SinglePriceFeedAdapterWithClearing)\\n   * @return lastDataTimestamp Timestamp of the latest reported data packages\\n   */\\n  function getDataTimestampFromLatestUpdate() external view returns (uint256 lastDataTimestamp);\\n\\n  /**\\n   * @notice Returns block timestamp of the latest successful update\\n   * @return blockTimestamp The block timestamp of the latest successful update\\n   */\\n  function getBlockTimestampFromLatestUpdate() external view returns (uint256 blockTimestamp);\\n\\n\\n  /**\\n   * @notice Returns timestamps of the latest successful update\\n   * @return dataTimestamp timestamp (usually in milliseconds) from the signed data packages\\n   * @return blockTimestamp timestamp of the block when the update has happened\\n   */\\n  function getTimestampsFromLatestUpdate() external view returns (uint128 dataTimestamp, uint128 blockTimestamp);\\n\\n  /**\\n   * @notice Returns identifiers of all data feeds supported by the Adapter contract\\n   * @return An array of data feed identifiers\\n   */\\n  function getDataFeedIds() external view returns (bytes32[] memory);\\n\\n  /**\\n   * @notice Returns the unique index of the given data feed\\n   * @param dataFeedId The data feed identifier\\n   * @return index The index of the data feed\\n   */\\n  function getDataFeedIndex(bytes32 dataFeedId) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns minimal required interval (usually in seconds) between subsequent updates\\n   * @return interval The required interval between updates\\n   */\\n  function getMinIntervalBetweenUpdates() external view returns (uint256);\\n\\n  /**\\n   * @notice Reverts if the proposed timestamp of data packages it too old or too new\\n   * comparing to the block.timestamp. It also ensures that the proposed timestamp is newer\\n   * Then the one from the previous update\\n   * @param dataPackagesTimestamp The proposed timestamp (usually in milliseconds)\\n   */\\n  function validateProposedDataPackagesTimestamp(uint256 dataPackagesTimestamp) external view;\\n\\n  /**\\n   * @notice Reverts if the updater is not authorised\\n   * @dev This function should revert if msg.sender is not allowed to update data feed values\\n   * @param updater The address of the proposed updater\\n   */\\n  function requireAuthorisedUpdater(address updater) external view;\\n}\\n\",\"keccak256\":\"0xcccac4cb64d14e8ba62915ee465b875b59b2de14977512c7f16370d52f94288f\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/PriceFeedBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport {Initializable} from \\\"../../../../../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IRedstoneAdapter} from \\\"../core/IRedstoneAdapter.sol\\\";\\nimport {IPriceFeed} from \\\"./interfaces/IPriceFeed.sol\\\";\\n\\n/**\\n * @title Main logic of the price feed contract\\n * @author The Redstone Oracles team\\n * @dev Implementation of common functions for the PriceFeed contract\\n * that queries data from the specified PriceFeedAdapter\\n * \\n * It can be used by projects that have already implemented with Chainlink-like\\n * price feeds and would like to minimise changes in their existing codebase.\\n * \\n * If you are flexible, it's much better (and cheaper in terms of gas) to query\\n * the PriceFeedAdapter contract directly\\n */\\nabstract contract PriceFeedBase is IPriceFeed, Initializable {\\n  uint256 internal constant INT256_MAX = uint256(type(int256).max);\\n\\n  error UnsafeUintToIntConversion(uint256 value);\\n\\n  /**\\n   * @dev Helpful function for upgradable contracts\\n   */\\n  function initialize() public initializer {\\n    // We don't have storage variables, but we keep this function\\n    // Because it is used for contract setup in upgradable contracts\\n  }\\n\\n  /**\\n   * @notice Returns data feed identifier for the PriceFeed contract\\n   * @return dataFeedId The identifier of the data feed\\n   */\\n  function getDataFeedId() public view virtual returns (bytes32);\\n\\n  /**\\n   * @notice Returns the address of the price feed adapter\\n   * @return address The address of the price feed adapter\\n   */\\n  function getPriceFeedAdapter() public view virtual returns (IRedstoneAdapter);\\n\\n\\n  /**\\n   * @notice Returns the number of decimals for the price feed\\n   * @dev By default, RedStone uses 8 decimals for data feeds\\n   * @return decimals The number of decimals in the price feed values\\n   */\\n  function decimals() public virtual pure override returns (uint8) {\\n    return 8;\\n  }\\n\\n\\n  /**\\n   * @notice Description of the Price Feed\\n   * @return description\\n   */\\n  function description() public view virtual override returns (string memory) {\\n    return \\\"Redstone Price Feed\\\";\\n  }\\n\\n  /**\\n   * @notice Version of the Price Feed\\n   * @dev Currently it has no specific motivation and was added\\n   * only to be compatible with the Chainlink interface\\n   * @return version\\n   */\\n  function version() public virtual pure override returns (uint256) {\\n    return 1;\\n  }\\n\\n\\n  /**\\n   * @notice Returns details of the latest successful update round\\n   * @dev It uses few helpful functions to abstract logic of getting\\n   * latest round id and value\\n   * @return roundId The number of the latest round\\n   * @return answer The latest reported value\\n   * @return startedAt Block timestamp when the latest successful round started\\n   * @return updatedAt Block timestamp of the latest successful round\\n   * @return answeredInRound The number of the latest round\\n   */\\n  function latestRoundData()\\n    public\\n    view\\n    override\\n    virtual\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    roundId = latestRound();\\n    answer = latestAnswer();\\n\\n    uint256 blockTimestamp = getPriceFeedAdapter().getBlockTimestampFromLatestUpdate();\\n\\n    // These values are equal after chainlink\\u2019s OCR update\\n    startedAt = blockTimestamp;\\n    updatedAt = blockTimestamp;\\n\\n    // We want to be compatible with Chainlink's interface\\n    // And in our case the roundId is always equal to answeredInRound\\n    answeredInRound = roundId;\\n  }\\n\\n  /**\\n   * @notice Old Chainlink function for getting the latest successfully reported value\\n   * @return latestAnswer The latest successfully reported value\\n   */\\n  function latestAnswer() public virtual view returns (int256) {\\n    bytes32 dataFeedId = getDataFeedId();\\n\\n    uint256 uintAnswer = getPriceFeedAdapter().getValueForDataFeed(dataFeedId);\\n\\n    if (uintAnswer > INT256_MAX) {\\n      revert UnsafeUintToIntConversion(uintAnswer);\\n    }\\n\\n    return int256(uintAnswer);\\n  }\\n\\n  /**\\n   * @notice Old Chainlink function for getting the number of latest round\\n   * @return latestRound The number of the latest update round\\n   */\\n  function latestRound() public view virtual returns (uint80);\\n}\\n\",\"keccak256\":\"0xbec13609809033ff746a3e53ebb1f6e98ed655f002f36fc635b1d46cd0dc7dd8\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\nimport {AggregatorV3Interface} from \\\"../../../../../../@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IPriceFeedLegacy} from \\\"./IPriceFeedLegacy.sol\\\";\\n\\n/**\\n * @title Complete price feed interface\\n * @author The Redstone Oracles team\\n * @dev All required public functions that must be implemented\\n * by each Redstone PriceFeed contract\\n */\\ninterface IPriceFeed is IPriceFeedLegacy, AggregatorV3Interface {\\n  /**\\n   * @notice Returns data feed identifier for the PriceFeed contract\\n   * @return dataFeedId The identifier of the data feed\\n   */\\n  function getDataFeedId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x48365f77742c7b8e249b25173dc79a801f7e868e38f69c0620d58a39cd87bc94\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/interfaces/IPriceFeedLegacy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.14;\\n\\n/**\\n * @title Interface with the old Chainlink Price Feed functions\\n * @author The Redstone Oracles team\\n * @dev There are some projects (e.g. gmx-contracts) that still\\n * rely on some legacy functions\\n */\\ninterface IPriceFeedLegacy {\\n  /**\\n   * @notice Old Chainlink function for getting the number of latest round\\n   * @return latestRound The number of the latest update round\\n   */\\n  function latestRound() external view returns (uint80);\\n\\n  \\n  /**\\n   * @notice Old Chainlink function for getting the latest successfully reported value\\n   * @return latestAnswer The latest successfully reported value\\n   */\\n  function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x9b32492517fb092a7c597ffe5ededb8ba7a1cafb7fbb1fd5bd10cd6762a908ff\",\"license\":\"BUSL-1.1\"},\"contracts/RedStoneBaseContracts/redstone-oracles-monorepo/packages/on-chain-relayer/contracts/price-feeds/without-rounds/PriceFeedWithoutRounds.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.14;\\n\\nimport {PriceFeedBase} from \\\"../PriceFeedBase.sol\\\";\\n\\n/**\\n * @title Implementation of a price feed contract without rounds support\\n * @author The Redstone Oracles team\\n * @dev This contract is abstract. The actual contract instance\\n * must implement the following functions:\\n * - getDataFeedId\\n * - getPriceFeedAdapter\\n */\\nabstract contract PriceFeedWithoutRounds is PriceFeedBase {\\n  error GetRoundDataCanBeOnlyCalledWithLatestRound(uint80 requestedRoundId);\\n\\n  /**\\n   * @dev We always return 0, since we do not support rounds in this contract\\n   */\\n  function latestRound() public pure override returns (uint80) {\\n    return 0;\\n  }\\n  \\n  /**\\n   * @dev There are possible use cases that some contracts don't need values from old rounds\\n   * but still rely on `getRoundData` or `latestRounud` functions\\n   */\\n  function getRoundData(uint80 requestedRoundId) public view override returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) {\\n    if (requestedRoundId != latestRound()) {\\n      revert GetRoundDataCanBeOnlyCalledWithLatestRound(requestedRoundId);\\n    }\\n    return latestRoundData();\\n  }\\n}\\n\",\"keccak256\":\"0x0b52b8792a82620c1b52623874c2729abf90bb9f725d8c0ebfd11104f92703fb\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107b63803806107b683398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161071761009f6000396000818160e40152818161015a015281816102a7015261058c01526107176000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806366c9aba6116100815780639a6fc8f51161005b5780639a6fc8f5146101c5578063c83377601461020f578063feaf968c1461023557600080fd5b806366c9aba6146101555780637284e4161461017c5780638129fc1c146101bb57600080fd5b806350d25bcd116100b257806350d25bcd1461012957806354fd4d501461013f578063668a0f021461014657600080fd5b8063313ce567146100ce57806347043b00146100e2575b600080fd5b604051600881526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d9565b61013161023d565b6040519081526020016100d9565b6001610131565b604051600081526020016100d9565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b604080518082018252601381527f52656473746f6e65205072696365204665656400000000000000000000000000602082015290516100d99190610629565b6101c361037c565b005b6101d86101d3366004610695565b610506565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100d9565b7f4254430000000000000000000000000000000000000000000000000000000000610131565b6101d8610578565b6040517f44e029820000000000000000000000000000000000000000000000000000000081527f425443000000000000000000000000000000000000000000000000000000000060048201819052600091829073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906344e0298290602401602060405180830381865afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031291906106c8565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610376576040517feccac09b000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b92915050565b600054610100900460ff161580801561039c5750600054600160ff909116105b806103b65750303b1580156103b6575060005460ff166001145b610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156104a057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b801561050357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60008080808069ffffffffffffffffffff86161561055e576040517f22bfd6df00000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8716600482015260240161036d565b610566610578565b939a9299509097509550909350915050565b60008080808061058661023d565b935060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b2758ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906106c8565b9596949594859450879350915050565b600060208083528351808285015260005b818110156106565785810183015185820160400152820161063a565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156106a757600080fd5b813569ffffffffffffffffffff811681146106c157600080fd5b9392505050565b6000602082840312156106da57600080fd5b505191905056fea264697066735822122012438136ffd4db2b8d7288b0a2aee65fe16afa5d73430aab3fb39e2ae0da33aa64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806366c9aba6116100815780639a6fc8f51161005b5780639a6fc8f5146101c5578063c83377601461020f578063feaf968c1461023557600080fd5b806366c9aba6146101555780637284e4161461017c5780638129fc1c146101bb57600080fd5b806350d25bcd116100b257806350d25bcd1461012957806354fd4d501461013f578063668a0f021461014657600080fd5b8063313ce567146100ce57806347043b00146100e2575b600080fd5b604051600881526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d9565b61013161023d565b6040519081526020016100d9565b6001610131565b604051600081526020016100d9565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b604080518082018252601381527f52656473746f6e65205072696365204665656400000000000000000000000000602082015290516100d99190610629565b6101c361037c565b005b6101d86101d3366004610695565b610506565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100d9565b7f4254430000000000000000000000000000000000000000000000000000000000610131565b6101d8610578565b6040517f44e029820000000000000000000000000000000000000000000000000000000081527f425443000000000000000000000000000000000000000000000000000000000060048201819052600091829073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906344e0298290602401602060405180830381865afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031291906106c8565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610376576040517feccac09b000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b92915050565b600054610100900460ff161580801561039c5750600054600160ff909116105b806103b65750303b1580156103b6575060005460ff166001145b610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161036d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156104a057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b801561050357600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60008080808069ffffffffffffffffffff86161561055e576040517f22bfd6df00000000000000000000000000000000000000000000000000000000815269ffffffffffffffffffff8716600482015260240161036d565b610566610578565b939a9299509097509550909350915050565b60008080808061058661023d565b935060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b2758ee6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061991906106c8565b9596949594859450879350915050565b600060208083528351808285015260005b818110156106565785810183015185820160400152820161063a565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156106a757600080fd5b813569ffffffffffffffffffff811681146106c157600080fd5b9392505050565b6000602082840312156106da57600080fd5b505191905056fea264697066735822122012438136ffd4db2b8d7288b0a2aee65fe16afa5d73430aab3fb39e2ae0da33aa64736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "decimals()": {
        "details": "By default, RedStone uses 8 decimals for data feeds",
        "returns": {
          "_0": "decimals The number of decimals in the price feed values"
        }
      },
      "description()": {
        "returns": {
          "_0": "description"
        }
      },
      "getDataFeedId()": {
        "returns": {
          "_0": "dataFeedId The identifier of the data feed"
        }
      },
      "getPriceFeedAdapter()": {
        "returns": {
          "_0": "address The address of the price feed adapter"
        }
      },
      "getRoundData(uint80)": {
        "details": "There are possible use cases that some contracts don't need values from old rounds but still rely on `getRoundData` or `latestRounud` functions"
      },
      "initialize()": {
        "details": "Helpful function for upgradable contracts"
      },
      "latestAnswer()": {
        "returns": {
          "_0": "latestAnswer The latest successfully reported value"
        }
      },
      "latestRound()": {
        "details": "We always return 0, since we do not support rounds in this contract"
      },
      "latestRoundData()": {
        "details": "It uses few helpful functions to abstract logic of getting latest round id and value",
        "returns": {
          "answer": "The latest reported value",
          "answeredInRound": "The number of the latest round",
          "roundId": "The number of the latest round",
          "startedAt": "Block timestamp when the latest successful round started",
          "updatedAt": "Block timestamp of the latest successful round"
        }
      },
      "version()": {
        "details": "Currently it has no specific motivation and was added only to be compatible with the Chainlink interface",
        "returns": {
          "_0": "version"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decimals()": {
        "notice": "Returns the number of decimals for the price feed"
      },
      "description()": {
        "notice": "Description of the Price Feed"
      },
      "getDataFeedId()": {
        "notice": "Returns data feed identifier for the PriceFeed contract"
      },
      "getPriceFeedAdapter()": {
        "notice": "Returns the address of the price feed adapter"
      },
      "latestAnswer()": {
        "notice": "Old Chainlink function for getting the latest successfully reported value"
      },
      "latestRoundData()": {
        "notice": "Returns details of the latest successful update round"
      },
      "version()": {
        "notice": "Version of the Price Feed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2491,
        "contract": "contracts/PriceFeeds/BTC/PriceFeedBTC.sol:PriceFeedBTC",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2494,
        "contract": "contracts/PriceFeeds/BTC/PriceFeedBTC.sol:PriceFeedBTC",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}